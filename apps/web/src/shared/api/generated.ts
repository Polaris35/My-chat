/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * My-chat
 * OpenAPI spec version: 1.0
 */
import { createInstance } from './api-instace';
import type { BodyType } from './api-instace';
export type AuthControllerGoogleAuthParams = {
    token: string;
};

export type AuthControllerRefreshTokensParams = {
    refreshToken: string;
};

export type AuthControllerLogoutParams = {
    refreshToken: string;
};

export type AttachmentsControllerGetFileAttachmentParams = {
    id: number;
};

export interface Tokens {
    accessToken: string;
    refreshToken: string;
}

export interface ResponseUserWithTokens {
    accessToken: string;
    createdAt: string;
    email: string;
    id: number;
    image: string;
    name: string;
    refreshToken: string;
}

export interface LoginDto {
    email: string;
    password: string;
}

export interface RegisterDto {
    email: string;
    password: string;
    passwordRepeat: string;
}

export interface CreateGroupConversationDto {
    /** id of avatar */
    avatarId: number;
    /** Conversation title */
    title: string;
    /** type of conversation */
    type: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const usersControllerFindById = (
    id: number,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        { url: `/api/users/find/by-id/${id}`, method: 'GET' },
        options,
    );
};

export const usersControllerFindByEmail = (
    email: string,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        { url: `/api/users/find/by-email/${email}`, method: 'GET' },
        options,
    );
};

export const usersControllerMe = (
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        { url: `/api/users/me`, method: 'GET' },
        options,
    );
};

export const usersControllerRemove = (
    id: number,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        { url: `/api/users/${id}`, method: 'DELETE' },
        options,
    );
};

export const usersControllerChangeImage = (
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        { url: `/api/users/change-image`, method: 'PUT' },
        options,
    );
};

export const attachmentsControllerUploadFile = (
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        { url: `/api/attachments/upload/image`, method: 'POST' },
        options,
    );
};

export const attachmentsControllerGetFileAttachment = (
    params: AttachmentsControllerGetFileAttachmentParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        { url: `/api/attachments`, method: 'GET', params },
        options,
    );
};

export const messagesControllerDeleteMessage = (
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        { url: `/api/messages`, method: 'DELETE' },
        options,
    );
};

export const conversationsControllerCreatePrivateConversation = (
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        { url: `/api/conversations/private-conversation`, method: 'POST' },
        options,
    );
};

export const conversationsControllerCreateGroupConversation = (
    createGroupConversationDto: BodyType<CreateGroupConversationDto>,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        {
            url: `/api/conversations/group-conversation`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: createGroupConversationDto,
        },
        options,
    );
};

export const conversationsControllerConversationList = (
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        { url: `/api/conversations/list`, method: 'GET' },
        options,
    );
};

export const authControllerCredentialsRegister = (
    registerDto: BodyType<RegisterDto>,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        {
            url: `/api/auth/credentials/register`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: registerDto,
        },
        options,
    );
};

export const authControllerCredentialsLogin = (
    loginDto: BodyType<LoginDto>,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<ResponseUserWithTokens>(
        {
            url: `/api/auth/credentials/login`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: loginDto,
        },
        options,
    );
};

export const authControllerLogout = (
    params: AuthControllerLogoutParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        { url: `/api/auth/logout`, method: 'GET', params },
        options,
    );
};

export const authControllerRefreshTokens = (
    params: AuthControllerRefreshTokensParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<Tokens>(
        { url: `/api/auth/refresh-tokens`, method: 'GET', params },
        options,
    );
};

export const authControllerGoogleAuth = (
    params: AuthControllerGoogleAuthParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<ResponseUserWithTokens>(
        { url: `/api/auth/google`, method: 'GET', params },
        options,
    );
};

export type UsersControllerFindByIdResult = NonNullable<
    Awaited<ReturnType<typeof usersControllerFindById>>
>;
export type UsersControllerFindByEmailResult = NonNullable<
    Awaited<ReturnType<typeof usersControllerFindByEmail>>
>;
export type UsersControllerMeResult = NonNullable<
    Awaited<ReturnType<typeof usersControllerMe>>
>;
export type UsersControllerRemoveResult = NonNullable<
    Awaited<ReturnType<typeof usersControllerRemove>>
>;
export type UsersControllerChangeImageResult = NonNullable<
    Awaited<ReturnType<typeof usersControllerChangeImage>>
>;
export type AttachmentsControllerUploadFileResult = NonNullable<
    Awaited<ReturnType<typeof attachmentsControllerUploadFile>>
>;
export type AttachmentsControllerGetFileAttachmentResult = NonNullable<
    Awaited<ReturnType<typeof attachmentsControllerGetFileAttachment>>
>;
export type MessagesControllerDeleteMessageResult = NonNullable<
    Awaited<ReturnType<typeof messagesControllerDeleteMessage>>
>;
export type ConversationsControllerCreatePrivateConversationResult =
    NonNullable<
        Awaited<
            ReturnType<typeof conversationsControllerCreatePrivateConversation>
        >
    >;
export type ConversationsControllerCreateGroupConversationResult = NonNullable<
    Awaited<ReturnType<typeof conversationsControllerCreateGroupConversation>>
>;
export type ConversationsControllerConversationListResult = NonNullable<
    Awaited<ReturnType<typeof conversationsControllerConversationList>>
>;
export type AuthControllerCredentialsRegisterResult = NonNullable<
    Awaited<ReturnType<typeof authControllerCredentialsRegister>>
>;
export type AuthControllerCredentialsLoginResult = NonNullable<
    Awaited<ReturnType<typeof authControllerCredentialsLogin>>
>;
export type AuthControllerLogoutResult = NonNullable<
    Awaited<ReturnType<typeof authControllerLogout>>
>;
export type AuthControllerRefreshTokensResult = NonNullable<
    Awaited<ReturnType<typeof authControllerRefreshTokens>>
>;
export type AuthControllerGoogleAuthResult = NonNullable<
    Awaited<ReturnType<typeof authControllerGoogleAuth>>
>;
